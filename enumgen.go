// Code generated by "enumgen"; DO NOT EDIT.

package codec

import (
	"cogentcore.org/core/enums"
)

var _ClarityTypeValues = []ClarityType{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}

// ClarityTypeN is the highest valid value for type ClarityType, plus one.
const ClarityTypeN ClarityType = 15

var _ClarityTypeValueMap = map[string]ClarityType{`Int128Signed`: 0, `Int128Unsigned`: 1, `Buffer`: 2, `BooleanTrue`: 3, `BooleanFalse`: 4, `StandardPrincipal`: 5, `ContractPrincipal`: 6, `OkResponse`: 7, `ErrResponse`: 8, `NoneOption`: 9, `SomeOption`: 10, `ListType`: 11, `TupleType`: 12, `StringASCIIType`: 13, `StringUTF8Type`: 14}

var _ClarityTypeDescMap = map[ClarityType]string{0: ``, 1: ``, 2: ``, 3: ``, 4: ``, 5: ``, 6: ``, 7: ``, 8: ``, 9: ``, 10: ``, 11: ``, 12: ``, 13: ``, 14: ``}

var _ClarityTypeMap = map[ClarityType]string{0: `Int128Signed`, 1: `Int128Unsigned`, 2: `Buffer`, 3: `BooleanTrue`, 4: `BooleanFalse`, 5: `StandardPrincipal`, 6: `ContractPrincipal`, 7: `OkResponse`, 8: `ErrResponse`, 9: `NoneOption`, 10: `SomeOption`, 11: `ListType`, 12: `TupleType`, 13: `StringASCIIType`, 14: `StringUTF8Type`}

// String returns the string representation of this ClarityType value.
func (i ClarityType) String() string { return enums.String(i, _ClarityTypeMap) }

// SetString sets the ClarityType value from its string representation,
// and returns an error if the string is invalid.
func (i *ClarityType) SetString(s string) error {
	return enums.SetString(i, s, _ClarityTypeValueMap, "ClarityType")
}

// Int64 returns the ClarityType value as an int64.
func (i ClarityType) Int64() int64 { return int64(i) }

// SetInt64 sets the ClarityType value from an int64.
func (i *ClarityType) SetInt64(in int64) { *i = ClarityType(in) }

// Desc returns the description of the ClarityType value.
func (i ClarityType) Desc() string { return enums.Desc(i, _ClarityTypeDescMap) }

// ClarityTypeValues returns all possible values for the type ClarityType.
func ClarityTypeValues() []ClarityType { return _ClarityTypeValues }

// Values returns all possible values for the type ClarityType.
func (i ClarityType) Values() []enums.Enum { return enums.Values(_ClarityTypeValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i ClarityType) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *ClarityType) UnmarshalText(text []byte) error {
	return enums.UnmarshalText(i, text, "ClarityType")
}

var _NetworkVersionValues = []NetworkVersion{0, 1}

// NetworkVersionN is the highest valid value for type NetworkVersion, plus one.
const NetworkVersionN NetworkVersion = 2

var _NetworkVersionValueMap = map[string]NetworkVersion{`Mainnet`: 0, `Testnet`: 1}

var _NetworkVersionDescMap = map[NetworkVersion]string{0: ``, 1: ``}

var _NetworkVersionMap = map[NetworkVersion]string{0: `Mainnet`, 1: `Testnet`}

// String returns the string representation of this NetworkVersion value.
func (i NetworkVersion) String() string { return enums.String(i, _NetworkVersionMap) }

// SetString sets the NetworkVersion value from its string representation,
// and returns an error if the string is invalid.
func (i *NetworkVersion) SetString(s string) error {
	return enums.SetString(i, s, _NetworkVersionValueMap, "NetworkVersion")
}

// Int64 returns the NetworkVersion value as an int64.
func (i NetworkVersion) Int64() int64 { return int64(i) }

// SetInt64 sets the NetworkVersion value from an int64.
func (i *NetworkVersion) SetInt64(in int64) { *i = NetworkVersion(in) }

// Desc returns the description of the NetworkVersion value.
func (i NetworkVersion) Desc() string { return enums.Desc(i, _NetworkVersionDescMap) }

// NetworkVersionValues returns all possible values for the type NetworkVersion.
func NetworkVersionValues() []NetworkVersion { return _NetworkVersionValues }

// Values returns all possible values for the type NetworkVersion.
func (i NetworkVersion) Values() []enums.Enum { return enums.Values(_NetworkVersionValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i NetworkVersion) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *NetworkVersion) UnmarshalText(text []byte) error {
	return enums.UnmarshalText(i, text, "NetworkVersion")
}

var _AuthorizationTypeValues = []AuthorizationType{4, 5}

// AuthorizationTypeN is the highest valid value for type AuthorizationType, plus one.
const AuthorizationTypeN AuthorizationType = 6

var _AuthorizationTypeValueMap = map[string]AuthorizationType{`Standard`: 4, `Sponsored`: 5}

var _AuthorizationTypeDescMap = map[AuthorizationType]string{4: ``, 5: ``}

var _AuthorizationTypeMap = map[AuthorizationType]string{4: `Standard`, 5: `Sponsored`}

// String returns the string representation of this AuthorizationType value.
func (i AuthorizationType) String() string { return enums.String(i, _AuthorizationTypeMap) }

// SetString sets the AuthorizationType value from its string representation,
// and returns an error if the string is invalid.
func (i *AuthorizationType) SetString(s string) error {
	return enums.SetString(i, s, _AuthorizationTypeValueMap, "AuthorizationType")
}

// Int64 returns the AuthorizationType value as an int64.
func (i AuthorizationType) Int64() int64 { return int64(i) }

// SetInt64 sets the AuthorizationType value from an int64.
func (i *AuthorizationType) SetInt64(in int64) { *i = AuthorizationType(in) }

// Desc returns the description of the AuthorizationType value.
func (i AuthorizationType) Desc() string { return enums.Desc(i, _AuthorizationTypeDescMap) }

// AuthorizationTypeValues returns all possible values for the type AuthorizationType.
func AuthorizationTypeValues() []AuthorizationType { return _AuthorizationTypeValues }

// Values returns all possible values for the type AuthorizationType.
func (i AuthorizationType) Values() []enums.Enum { return enums.Values(_AuthorizationTypeValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i AuthorizationType) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *AuthorizationType) UnmarshalText(text []byte) error {
	return enums.UnmarshalText(i, text, "AuthorizationType")
}

var _HashModeValues = []HashMode{0, 1, 2, 3}

// HashModeN is the highest valid value for type HashMode, plus one.
const HashModeN HashMode = 4

var _HashModeValueMap = map[string]HashMode{`P2PKH`: 0, `P2SH`: 1, `P2WPKH`: 2, `P2WSH`: 3}

var _HashModeDescMap = map[HashMode]string{0: `hash160(public-key), same as bitcoin&#39;s p2pkh`, 1: `hash160(multisig-redeem-script), same as bitcoin&#39;s multisig p2sh`, 2: `hash160(segwit-program-00(p2pkh)), same as bitcoin&#39;s p2sh-p2wpkh`, 3: `hash160(segwit-program-00(public-keys)), same as bitcoin&#39;s p2sh-p2wsh`}

var _HashModeMap = map[HashMode]string{0: `P2PKH`, 1: `P2SH`, 2: `P2WPKH`, 3: `P2WSH`}

// String returns the string representation of this HashMode value.
func (i HashMode) String() string { return enums.String(i, _HashModeMap) }

// SetString sets the HashMode value from its string representation,
// and returns an error if the string is invalid.
func (i *HashMode) SetString(s string) error {
	return enums.SetString(i, s, _HashModeValueMap, "HashMode")
}

// Int64 returns the HashMode value as an int64.
func (i HashMode) Int64() int64 { return int64(i) }

// SetInt64 sets the HashMode value from an int64.
func (i *HashMode) SetInt64(in int64) { *i = HashMode(in) }

// Desc returns the description of the HashMode value.
func (i HashMode) Desc() string { return enums.Desc(i, _HashModeDescMap) }

// HashModeValues returns all possible values for the type HashMode.
func HashModeValues() []HashMode { return _HashModeValues }

// Values returns all possible values for the type HashMode.
func (i HashMode) Values() []enums.Enum { return enums.Values(_HashModeValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i HashMode) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *HashMode) UnmarshalText(text []byte) error { return enums.UnmarshalText(i, text, "HashMode") }

var _AddressVersionValues = []AddressVersion{20, 21, 22, 26}

// AddressVersionN is the highest valid value for type AddressVersion, plus one.
const AddressVersionN AddressVersion = 27

var _AddressVersionValueMap = map[string]AddressVersion{`MainnetMultiSig`: 20, `TestnetMultiSig`: 21, `MainnetSingleSig`: 22, `TestnetSingleSig`: 26}

var _AddressVersionDescMap = map[AddressVersion]string{20: ``, 21: ``, 22: ``, 26: ``}

var _AddressVersionMap = map[AddressVersion]string{20: `MainnetMultiSig`, 21: `TestnetMultiSig`, 22: `MainnetSingleSig`, 26: `TestnetSingleSig`}

// String returns the string representation of this AddressVersion value.
func (i AddressVersion) String() string { return enums.String(i, _AddressVersionMap) }

// SetString sets the AddressVersion value from its string representation,
// and returns an error if the string is invalid.
func (i *AddressVersion) SetString(s string) error {
	return enums.SetString(i, s, _AddressVersionValueMap, "AddressVersion")
}

// Int64 returns the AddressVersion value as an int64.
func (i AddressVersion) Int64() int64 { return int64(i) }

// SetInt64 sets the AddressVersion value from an int64.
func (i *AddressVersion) SetInt64(in int64) { *i = AddressVersion(in) }

// Desc returns the description of the AddressVersion value.
func (i AddressVersion) Desc() string { return enums.Desc(i, _AddressVersionDescMap) }

// AddressVersionValues returns all possible values for the type AddressVersion.
func AddressVersionValues() []AddressVersion { return _AddressVersionValues }

// Values returns all possible values for the type AddressVersion.
func (i AddressVersion) Values() []enums.Enum { return enums.Values(_AddressVersionValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i AddressVersion) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *AddressVersion) UnmarshalText(text []byte) error {
	return enums.UnmarshalText(i, text, "AddressVersion")
}

var _AnchorModeValues = []AnchorMode{1, 2, 3}

// AnchorModeN is the highest valid value for type AnchorMode, plus one.
const AnchorModeN AnchorMode = 4

var _AnchorModeValueMap = map[string]AnchorMode{`AnchorBlock`: 1, `MicroBlock`: 2, `Any`: 3}

var _AnchorModeDescMap = map[AnchorMode]string{1: ``, 2: ``, 3: ``}

var _AnchorModeMap = map[AnchorMode]string{1: `AnchorBlock`, 2: `MicroBlock`, 3: `Any`}

// String returns the string representation of this AnchorMode value.
func (i AnchorMode) String() string { return enums.String(i, _AnchorModeMap) }

// SetString sets the AnchorMode value from its string representation,
// and returns an error if the string is invalid.
func (i *AnchorMode) SetString(s string) error {
	return enums.SetString(i, s, _AnchorModeValueMap, "AnchorMode")
}

// Int64 returns the AnchorMode value as an int64.
func (i AnchorMode) Int64() int64 { return int64(i) }

// SetInt64 sets the AnchorMode value from an int64.
func (i *AnchorMode) SetInt64(in int64) { *i = AnchorMode(in) }

// Desc returns the description of the AnchorMode value.
func (i AnchorMode) Desc() string { return enums.Desc(i, _AnchorModeDescMap) }

// AnchorModeValues returns all possible values for the type AnchorMode.
func AnchorModeValues() []AnchorMode { return _AnchorModeValues }

// Values returns all possible values for the type AnchorMode.
func (i AnchorMode) Values() []enums.Enum { return enums.Values(_AnchorModeValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i AnchorMode) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *AnchorMode) UnmarshalText(text []byte) error {
	return enums.UnmarshalText(i, text, "AnchorMode")
}

var _PostConditionModeValues = []PostConditionMode{1, 2}

// PostConditionModeN is the highest valid value for type PostConditionMode, plus one.
const PostConditionModeN PostConditionMode = 3

var _PostConditionModeValueMap = map[string]PostConditionMode{`Allow`: 1, `Deny`: 2}

var _PostConditionModeDescMap = map[PostConditionMode]string{1: ``, 2: ``}

var _PostConditionModeMap = map[PostConditionMode]string{1: `Allow`, 2: `Deny`}

// String returns the string representation of this PostConditionMode value.
func (i PostConditionMode) String() string { return enums.String(i, _PostConditionModeMap) }

// SetString sets the PostConditionMode value from its string representation,
// and returns an error if the string is invalid.
func (i *PostConditionMode) SetString(s string) error {
	return enums.SetString(i, s, _PostConditionModeValueMap, "PostConditionMode")
}

// Int64 returns the PostConditionMode value as an int64.
func (i PostConditionMode) Int64() int64 { return int64(i) }

// SetInt64 sets the PostConditionMode value from an int64.
func (i *PostConditionMode) SetInt64(in int64) { *i = PostConditionMode(in) }

// Desc returns the description of the PostConditionMode value.
func (i PostConditionMode) Desc() string { return enums.Desc(i, _PostConditionModeDescMap) }

// PostConditionModeValues returns all possible values for the type PostConditionMode.
func PostConditionModeValues() []PostConditionMode { return _PostConditionModeValues }

// Values returns all possible values for the type PostConditionMode.
func (i PostConditionMode) Values() []enums.Enum { return enums.Values(_PostConditionModeValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i PostConditionMode) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *PostConditionMode) UnmarshalText(text []byte) error {
	return enums.UnmarshalText(i, text, "PostConditionMode")
}

var _PostConditionTypeValues = []PostConditionType{0, 1, 2}

// PostConditionTypeN is the highest valid value for type PostConditionType, plus one.
const PostConditionTypeN PostConditionType = 3

var _PostConditionTypeValueMap = map[string]PostConditionType{`STXPostCondition`: 0, `FTPostCondition`: 1, `NFTPostCondition`: 2}

var _PostConditionTypeDescMap = map[PostConditionType]string{0: ``, 1: ``, 2: ``}

var _PostConditionTypeMap = map[PostConditionType]string{0: `STXPostCondition`, 1: `FTPostCondition`, 2: `NFTPostCondition`}

// String returns the string representation of this PostConditionType value.
func (i PostConditionType) String() string { return enums.String(i, _PostConditionTypeMap) }

// SetString sets the PostConditionType value from its string representation,
// and returns an error if the string is invalid.
func (i *PostConditionType) SetString(s string) error {
	return enums.SetString(i, s, _PostConditionTypeValueMap, "PostConditionType")
}

// Int64 returns the PostConditionType value as an int64.
func (i PostConditionType) Int64() int64 { return int64(i) }

// SetInt64 sets the PostConditionType value from an int64.
func (i *PostConditionType) SetInt64(in int64) { *i = PostConditionType(in) }

// Desc returns the description of the PostConditionType value.
func (i PostConditionType) Desc() string { return enums.Desc(i, _PostConditionTypeDescMap) }

// PostConditionTypeValues returns all possible values for the type PostConditionType.
func PostConditionTypeValues() []PostConditionType { return _PostConditionTypeValues }

// Values returns all possible values for the type PostConditionType.
func (i PostConditionType) Values() []enums.Enum { return enums.Values(_PostConditionTypeValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i PostConditionType) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *PostConditionType) UnmarshalText(text []byte) error {
	return enums.UnmarshalText(i, text, "PostConditionType")
}

var _PrincipalTypeValues = []PrincipalType{2, 3, 5, 6}

// PrincipalTypeN is the highest valid value for type PrincipalType, plus one.
const PrincipalTypeN PrincipalType = 7

var _PrincipalTypeValueMap = map[string]PrincipalType{`PrincipalStandard`: 2, `PrincipalContract`: 3, `RecipientStandard`: 5, `RecipientContract`: 6}

var _PrincipalTypeDescMap = map[PrincipalType]string{2: ``, 3: ``, 5: ``, 6: ``}

var _PrincipalTypeMap = map[PrincipalType]string{2: `PrincipalStandard`, 3: `PrincipalContract`, 5: `RecipientStandard`, 6: `RecipientContract`}

// String returns the string representation of this PrincipalType value.
func (i PrincipalType) String() string { return enums.String(i, _PrincipalTypeMap) }

// SetString sets the PrincipalType value from its string representation,
// and returns an error if the string is invalid.
func (i *PrincipalType) SetString(s string) error {
	return enums.SetString(i, s, _PrincipalTypeValueMap, "PrincipalType")
}

// Int64 returns the PrincipalType value as an int64.
func (i PrincipalType) Int64() int64 { return int64(i) }

// SetInt64 sets the PrincipalType value from an int64.
func (i *PrincipalType) SetInt64(in int64) { *i = PrincipalType(in) }

// Desc returns the description of the PrincipalType value.
func (i PrincipalType) Desc() string { return enums.Desc(i, _PrincipalTypeDescMap) }

// PrincipalTypeValues returns all possible values for the type PrincipalType.
func PrincipalTypeValues() []PrincipalType { return _PrincipalTypeValues }

// Values returns all possible values for the type PrincipalType.
func (i PrincipalType) Values() []enums.Enum { return enums.Values(_PrincipalTypeValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i PrincipalType) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *PrincipalType) UnmarshalText(text []byte) error {
	return enums.UnmarshalText(i, text, "PrincipalType")
}

var _FungibleConditionCodeValues = []FungibleConditionCode{1, 2, 3, 4, 5}

// FungibleConditionCodeN is the highest valid value for type FungibleConditionCode, plus one.
const FungibleConditionCodeN FungibleConditionCode = 6

var _FungibleConditionCodeValueMap = map[string]FungibleConditionCode{`SentEq`: 1, `SentGt`: 2, `SentGe`: 3, `SentLt`: 4, `SentLe`: 5}

var _FungibleConditionCodeDescMap = map[FungibleConditionCode]string{1: ``, 2: ``, 3: ``, 4: ``, 5: ``}

var _FungibleConditionCodeMap = map[FungibleConditionCode]string{1: `SentEq`, 2: `SentGt`, 3: `SentGe`, 4: `SentLt`, 5: `SentLe`}

// String returns the string representation of this FungibleConditionCode value.
func (i FungibleConditionCode) String() string { return enums.String(i, _FungibleConditionCodeMap) }

// SetString sets the FungibleConditionCode value from its string representation,
// and returns an error if the string is invalid.
func (i *FungibleConditionCode) SetString(s string) error {
	return enums.SetString(i, s, _FungibleConditionCodeValueMap, "FungibleConditionCode")
}

// Int64 returns the FungibleConditionCode value as an int64.
func (i FungibleConditionCode) Int64() int64 { return int64(i) }

// SetInt64 sets the FungibleConditionCode value from an int64.
func (i *FungibleConditionCode) SetInt64(in int64) { *i = FungibleConditionCode(in) }

// Desc returns the description of the FungibleConditionCode value.
func (i FungibleConditionCode) Desc() string { return enums.Desc(i, _FungibleConditionCodeDescMap) }

// FungibleConditionCodeValues returns all possible values for the type FungibleConditionCode.
func FungibleConditionCodeValues() []FungibleConditionCode { return _FungibleConditionCodeValues }

// Values returns all possible values for the type FungibleConditionCode.
func (i FungibleConditionCode) Values() []enums.Enum {
	return enums.Values(_FungibleConditionCodeValues)
}

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i FungibleConditionCode) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *FungibleConditionCode) UnmarshalText(text []byte) error {
	return enums.UnmarshalText(i, text, "FungibleConditionCode")
}

var _NFTConditionCodeValues = []NFTConditionCode{16, 17}

// NFTConditionCodeN is the highest valid value for type NFTConditionCode, plus one.
const NFTConditionCodeN NFTConditionCode = 18

var _NFTConditionCodeValueMap = map[string]NFTConditionCode{`Sent`: 16, `NotSent`: 17}

var _NFTConditionCodeDescMap = map[NFTConditionCode]string{16: ``, 17: ``}

var _NFTConditionCodeMap = map[NFTConditionCode]string{16: `Sent`, 17: `NotSent`}

// String returns the string representation of this NFTConditionCode value.
func (i NFTConditionCode) String() string { return enums.String(i, _NFTConditionCodeMap) }

// SetString sets the NFTConditionCode value from its string representation,
// and returns an error if the string is invalid.
func (i *NFTConditionCode) SetString(s string) error {
	return enums.SetString(i, s, _NFTConditionCodeValueMap, "NFTConditionCode")
}

// Int64 returns the NFTConditionCode value as an int64.
func (i NFTConditionCode) Int64() int64 { return int64(i) }

// SetInt64 sets the NFTConditionCode value from an int64.
func (i *NFTConditionCode) SetInt64(in int64) { *i = NFTConditionCode(in) }

// Desc returns the description of the NFTConditionCode value.
func (i NFTConditionCode) Desc() string { return enums.Desc(i, _NFTConditionCodeDescMap) }

// NFTConditionCodeValues returns all possible values for the type NFTConditionCode.
func NFTConditionCodeValues() []NFTConditionCode { return _NFTConditionCodeValues }

// Values returns all possible values for the type NFTConditionCode.
func (i NFTConditionCode) Values() []enums.Enum { return enums.Values(_NFTConditionCodeValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i NFTConditionCode) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *NFTConditionCode) UnmarshalText(text []byte) error {
	return enums.UnmarshalText(i, text, "NFTConditionCode")
}

var _PayloadTypeValues = []PayloadType{0, 1, 2, 3, 4, 5, 6, 7, 8}

// PayloadTypeN is the highest valid value for type PayloadType, plus one.
const PayloadTypeN PayloadType = 9

var _PayloadTypeValueMap = map[string]PayloadType{`TokenTransfer`: 0, `ContractDeploy`: 1, `ContractCall`: 2, `PoisonMicroblock`: 3, `Coinbase`: 4, `CoinbaseToAltRecipient`: 5, `VersionedContractDeploy`: 6, `TenureChange`: 7, `NakamotoCoinbase`: 8}

var _PayloadTypeDescMap = map[PayloadType]string{0: ``, 1: ``, 2: ``, 3: ``, 4: ``, 5: `https://github.com/stacksgov/sips/blob/main/sips/sip-015/sip-015-network-upgrade.md`, 6: ``, 7: `https://github.com/stacksgov/sips/blob/main/sips/sip-021/sip-021-nakamoto.md`, 8: ``}

var _PayloadTypeMap = map[PayloadType]string{0: `TokenTransfer`, 1: `ContractDeploy`, 2: `ContractCall`, 3: `PoisonMicroblock`, 4: `Coinbase`, 5: `CoinbaseToAltRecipient`, 6: `VersionedContractDeploy`, 7: `TenureChange`, 8: `NakamotoCoinbase`}

// String returns the string representation of this PayloadType value.
func (i PayloadType) String() string { return enums.String(i, _PayloadTypeMap) }

// SetString sets the PayloadType value from its string representation,
// and returns an error if the string is invalid.
func (i *PayloadType) SetString(s string) error {
	return enums.SetString(i, s, _PayloadTypeValueMap, "PayloadType")
}

// Int64 returns the PayloadType value as an int64.
func (i PayloadType) Int64() int64 { return int64(i) }

// SetInt64 sets the PayloadType value from an int64.
func (i *PayloadType) SetInt64(in int64) { *i = PayloadType(in) }

// Desc returns the description of the PayloadType value.
func (i PayloadType) Desc() string { return enums.Desc(i, _PayloadTypeDescMap) }

// PayloadTypeValues returns all possible values for the type PayloadType.
func PayloadTypeValues() []PayloadType { return _PayloadTypeValues }

// Values returns all possible values for the type PayloadType.
func (i PayloadType) Values() []enums.Enum { return enums.Values(_PayloadTypeValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i PayloadType) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *PayloadType) UnmarshalText(text []byte) error {
	return enums.UnmarshalText(i, text, "PayloadType")
}

var _TenureChangeCauseValues = []TenureChangeCause{0, 1}

// TenureChangeCauseN is the highest valid value for type TenureChangeCause, plus one.
const TenureChangeCauseN TenureChangeCause = 2

var _TenureChangeCauseValueMap = map[string]TenureChangeCause{`BlockFound`: 0, `Extend`: 1}

var _TenureChangeCauseDescMap = map[TenureChangeCause]string{0: ``, 1: ``}

var _TenureChangeCauseMap = map[TenureChangeCause]string{0: `BlockFound`, 1: `Extend`}

// String returns the string representation of this TenureChangeCause value.
func (i TenureChangeCause) String() string { return enums.String(i, _TenureChangeCauseMap) }

// SetString sets the TenureChangeCause value from its string representation,
// and returns an error if the string is invalid.
func (i *TenureChangeCause) SetString(s string) error {
	return enums.SetString(i, s, _TenureChangeCauseValueMap, "TenureChangeCause")
}

// Int64 returns the TenureChangeCause value as an int64.
func (i TenureChangeCause) Int64() int64 { return int64(i) }

// SetInt64 sets the TenureChangeCause value from an int64.
func (i *TenureChangeCause) SetInt64(in int64) { *i = TenureChangeCause(in) }

// Desc returns the description of the TenureChangeCause value.
func (i TenureChangeCause) Desc() string { return enums.Desc(i, _TenureChangeCauseDescMap) }

// TenureChangeCauseValues returns all possible values for the type TenureChangeCause.
func TenureChangeCauseValues() []TenureChangeCause { return _TenureChangeCauseValues }

// Values returns all possible values for the type TenureChangeCause.
func (i TenureChangeCause) Values() []enums.Enum { return enums.Values(_TenureChangeCauseValues) }

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i TenureChangeCause) MarshalText() ([]byte, error) { return []byte(i.String()), nil }

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *TenureChangeCause) UnmarshalText(text []byte) error {
	return enums.UnmarshalText(i, text, "TenureChangeCause")
}
